import sys
import cv2
from PyQt5.QtWidgets import (
    QApplication, QMainWindow, QLabel, QPushButton, QVBoxLayout, QWidget
)
from PyQt5.QtGui import QPixmap, QImage
from PyQt5.QtCore import Qt, QTimer
from ultralytics import YOLO


class RoverDetectionApp(QMainWindow):
    def _init_(self):
        super()._init_()
        self.setWindowTitle("Live Object Detection for Rover")
        self.setGeometry(100, 100, 900, 700)

        # YOLO model
        self.model = YOLO("yolov8n.pt")  # Load YOLOv8 model (nano version for speed)

        # Central widget and layout
        self.central_widget = QWidget()
        self.setCentralWidget(self.central_widget)
        self.layout = QVBoxLayout(self.central_widget)

        # QLabel for displaying the video feed
        self.video_label = QLabel("Waiting for video feed...")
        self.video_label.setAlignment(Qt.AlignCenter)
        self.layout.addWidget(self.video_label)

        # Buttons
        self.start_button = QPushButton("Start Detection")
        self.start_button.clicked.connect(self.start_detection)
        self.layout.addWidget(self.start_button)

        self.stop_button = QPushButton("Stop Detection")
        self.stop_button.clicked.connect(self.stop_detection)
        self.stop_button.setEnabled(False)
        self.layout.addWidget(self.stop_button)

        # Timer for video feed updates
        self.timer = QTimer()
        self.timer.timeout.connect(self.update_frame)

        # Video capture (using the laptop's webcam)
        self.cap = None

    def start_detection(self):
        # Start video feed
        self.cap = cv2.VideoCapture(0)  # Replace 0 with your video source (e.g., camera index or IP feed)
        if not self.cap.isOpened():
            self.video_label.setText("Unable to access camera feed!")
            return

        self.start_button.setEnabled(False)
        self.stop_button.setEnabled(True)
        self.timer.start(30)  # Update every 30ms

    def stop_detection(self):
        # Stop video feed
        self.timer.stop()
        if self.cap:
            self.cap.release()
        self.video_label.setText("Video feed stopped.")
        self.start_button.setEnabled(True)
        self.stop_button.setEnabled(False)

    def update_frame(self):
        if not self.cap or not self.cap.isOpened():
            return

        ret, frame = self.cap.read()
        if not ret:
            self.video_label.setText("Failed to read frame!")
            return

        # Run YOLOv8 on the frame
        results = self.model(frame, stream=True)  # Use streaming for better performance
        for result in results:
            frame = result.plot()  # Draw detections on the frame

        # Convert the frame to QPixmap for display
        frame = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
        h, w, ch = frame.shape
        bytes_per_line = ch * w
        qt_image = QImage(frame.data, w, h, bytes_per_line, QImage.Format_RGB888)
        pixmap = QPixmap.fromImage(qt_image)
        self.video_label.setPixmap(pixmap.scaled(self.video_label.width(), self.video_label.height(), Qt.KeepAspectRatio))

    def closeEvent(self, event):
        # Stop everything on close
        self.stop_detection()
        event.accept()


if _name_ == "_main_":
    app = QApplication(sys.argv)
    window = RoverDetectionApp()
    window.show()
    sys.exit(app.exec_())